// build with: haiku -a aarch64 -l ./Ryujinx_mods/beatrice/beatrice.hku F4B3318D56031E4550EEDDCB12D28FFB78D8397E.ips

// fix buggy line-feed
instrs c5a18 4 {
    mov x0, x9
}

// cancel full-width extra spacing between lines.
instrs c05cc 4 {
    nop
}

// stop line feed
instrs c5a24 4 {
    b #0x4b4
}

// install trampoline
instrs be86c c {
    !call #0xc4dd8
    // skip old check logic
    cmp w8, #0x00
    beq #0x1fc
}

// utf32 in w0
// result in w8 (gets overwritten by ldr immediately)
// 0x00 is mode 0, 0x01 is mode 1.
// sure hope this code is as unused as it seems!
instrs c4dd8 30 {
    cmp w0, #0x100
    bgt #0x0C
    // ascii
    mov w8, #0x01
    ret

    cmp w0, #0xE000
    blt #0x14
    cmp w0, #0xF000
    bgt #0x0C

    mov w8, #0x01
    ret
    mov w8, #0x00
    ret

}

// Enable recording video
instrs fbf54 4 {
    !jump #0x153920
}

// Enable taking screenshots
instrs fbf68 4 {
    !jump #0x153940
}

// Save prev and current character in memory for kerning
// clobbers a bunch of logic that experimentally seems to be
// unimportant.
instrs 13dea8 28 {
       // load the base address I'm working with
       !call #0x1442f8

       // flip the char bit and store it in memory
       ldr w0, [x8, #0xd44]
       eor w0, w0, #0x04
       str w0, [x8, #0xd44]

       // add the xor'd char bit as memory offset
       add x8, x8, x0

       // original logic
       ldur w0, [x29, #-4]

       // store the char (note that +4/+0 offset already applied)
       str w0, [x8, #0xd48]

       // finish original logic
       ldp x29, x30, [sp, #0x10]
       add sp, sp, #0x20
       ret
}

// basic discriminatory kern experiment
// clobbers values in: x8
instrs 13bde8 24 {
       !jump #0x1441a8
       nop
       nop
       nop
       nop
       nop
       nop
       nop
       nop
}

instrs 1441a8 80 {
       // load char bit and derive address for /prev/ char
       !call #0x1442f8
       ldr w9, [x8, #0xd44]
       eor w9, w9, #0x04
       add x9, x8, x9
       ldr w8, [x9, #0xd48]

       // compare orig char with 'A'
       cmp w8, #0x41
       b.ne #0x18
       cmp w26, #0x57
       b.ne #0x0c
       fmov s8, #30.0
       nop
       nop
       nop
       nop
       nop
       nop
       !jump #0x13bdec
}

// experimental access to test ip-relative offset trouble
instrs 1442f8 80 {
       adrp x8, #0xbc0000
       ret
}